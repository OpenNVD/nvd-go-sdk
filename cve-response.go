package main

import "time"

type VulnerabilitiesResponse struct {
	ResultsPerPage  int        `json:"resultsPerPage"`
	StartIndex      int        `json:"startIndex"`
	TotalResults    int        `json:"totalResults"`
	Format          string     `json:"format"`
	Version         string     `json:"version"`
	Timestamp       CustomTime `json:"timestamp"`
	Vulnerabilities []struct {
		CVE struct {
			ID               string     `json:"id"`
			SourceIdentifier string     `json:"sourceIdentifier"`
			Published        CustomTime `json:"published"`
			LastModified     CustomTime `json:"lastModified"`
			VulnStatus       string     `json:"vulnStatus"`
			Descriptions     []struct {
				Lang  string `json:"lang"`
				Value string `json:"value"`
			} `json:"descriptions"`
			Metrics struct {
				CVSSMetricV2 []struct {
					Source                  string  `json:"source"`
					Type                    string  `json:"type"`
					BaseSeverity            string  `json:"baseSeverity"`
					ExploitabilityScore     float64 `json:"exploitabilityScore"`
					ImpactScore             float64 `json:"impactScore"`
					ACInsufInfo             bool    `json:"acInsufInfo"`
					ObtainAllPrivilege      bool    `json:"obtainAllPrivilege"`
					ObtainUserPrivilege     bool    `json:"obtainUserPrivilege"`
					ObtainOtherPrivilege    bool    `json:"obtainOtherPrivilege"`
					UserInteractionRequired bool    `json:"userInteractionRequired"`
				} `json:"cvssMetricV2"`
			} `json:"metrics"`
			Weaknesses []struct {
				Source      string `json:"source"`
				Type        string `json:"type"`
				Description []struct {
					Lang  string `json:"lang"`
					Value string `json:"value"`
				} `json:"description"`
			} `json:"weaknesses"`
		} `json:"cve"`
	} `json:"vulnerabilities"`
	Configurations []struct {
		Nodes []struct {
			Operator bool `json:"operator"`
			Negate   bool `json:"negate"`
			CPEMatch []struct {
				Vulnerable      bool   `json:"vulnerable"`
				Criteria        string `json:"criteria"`
				MatchCriteriaID string `json:"matchCriteriaId"`
			} `json:"cpeMatch"`
		} `json:"nodes"`
	} `json:"configurations"`
	References []struct {
		URL    string `json:"url"`
		Source string `json:"source"`
	} `json:"references"`
}

type CustomTime struct {
	time.Time
}

func (c *CustomTime) UnmarshalJSON(b []byte) error {
	s := string(b)
	s = s[1 : len(s)-1] // Remove quotes
	t, err := time.Parse("2006-01-02T15:04:05.999", s)
	if err != nil {
		return err
	}
	c.Time = t
	return nil
}
